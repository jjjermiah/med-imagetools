[project]
name = "med-imagetools"
authors = [
  { name = "Sejin Kim", email = "sejin.kim@uhnresearch.ca" },
  { name = "Benjamin Haibe-Kains", email = "benjamin.haibe.kains@utoronto.ca" },
  { name = "Jermiah", email = "jermiahjoseph98@gmail.com" },
]
description = "Med-Imagetools: Transparent and Reproducible Medical Image Processing Pipelines in Python"
version = "2.0.0"
requires-python = ">= 3.10"
dependencies = [
  "numpy>=1.26.4,<2",
  "pydicom==2.4.4",
  "matplotlib>=3.9.2,<4",
  "pandas>=2.2.2,<3",
  "pynrrd>=1.0.0,<2",
  "pyyaml>=6.0.2,<7",
  "simpleitk>=2.4.0,<3",
  "h5py>=3.11.0,<4",
  "tqdm>=4.66.5,<5",
  "dill>=0.3.8,<0.4",
  "attrs>=24.2.0,<25",
  "scikit-image>=0.24.0,<0.25",
  "joblib>=1.4.2,<2",
  "scikit-learn>=1.5.2,<2",
  "rich>=13.8.1,<14",
  "rich-click>=1.8.3,<2",
  "textual>=0.79.1,<0.80",
  "click-didyoumean>=0.3.1,<0.4",
  "loguru>=0.7.2,<0.8",
  "scikit-rt>=0.3.19,<0.4",
]

[project.scripts]
mitk = "mitk.cli.main:cli"
build_rtstruct = "mitk.io.loaders.structureset:main"
# autopipeline = "imgtools.autopipeline:main"
# betapipeline = "imgtools.autopipeline_refactored:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
directory = "dist"

[tool.hatch.build.targets]
wheel = { packages = ["src/imgtools", "src/mitk"] }
#--------------------------------------------------------------------------------------------------#
############################################## PIXI ################################################
#__________________________________________________________________________________________________#

[tool.pixi.project]
version = "0.3.0"
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64", "win-64", "osx-64"]

[tool.pixi.system-requirements]
linux = "3.10.0"

[tool.pixi.pypi-dependencies]
med-imagetools = { path = ".", editable = true }

[tool.pixi.environments]
dev = { features = ["test", "style"], solve-group = "default" }
publish = { features = ["build", "release"], solve-group = "default" }
# py310 = ["py310", "test"]
# py311 = ["py311", "test"]
# py312 = ["py312", "test"]

# ############################################## python ###############################################

# [tool.pixi.feature.py310.dependencies]
# python = "3.10.*"
# [tool.pixi.feature.py311.dependencies]
# python = "3.11.*"
# [tool.pixi.feature.py312.dependencies]
# python = "3.12.*"

############################################## TEST ################################################
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
ipykernel = ">=6.29.3,<6.30"

[tool.pytest.ini_options]
addopts = "--ignore=tests/old_mit_tests/"

[tool.pixi.feature.test.tasks.test]
cmd = [
  "pytest",
  "--numprocesses=auto",
  "-s",
  "--verbose",
  "--cov=mitk",
  "--cov-report=xml:coverage-report/coverage.xml",
  "--cov-config=config/coverage.toml",
]
inputs = ["src", "tests", "config/coverage.toml"]
outputs = ["coverage-report/coverage.xml"]
description = "Run tests using pytest with all cores and generate coverage report."

[tool.pixi.feature.test.tasks.coverage]
cmd = "coverage report --rcfile=config/coverage.toml"
inputs = ["coverage-report/coverage.xml", "config/coverage.toml"]
depends-on = ["test"]
description = "Generate coverage report from result of test task."

# [tool.pixi.feature.test.tasks.validate]
# cmd = "pre-commit run --all-files"
# inputs = ["src/*", "tests/*", "config/*"]

############################################## STYLE ###############################################
# See config/ruff.toml for the configuration
[tool.pixi.feature.style.dependencies]
ruff = ">=0.4.4"
pre-commit = ">=3.7.1,<3.8"

[tool.pixi.feature.style.tasks.lint]
cmd = "ruff check --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

[tool.pixi.feature.style.tasks.format]
cmd = "ruff format --config=config/ruff.toml src"
inputs = ["src", "config/ruff.toml"]

# ############################################## DOCS ################################################
# # Available tasks: doc-build, doc-serve, doc-deploy
# # See config/mkdocs.yaml for the configuration
# [tool.pixi.feature.docs.dependencies]
# mkdocs = "*"

# [tool.pixi.feature.docs.tasks.doc-build]
# cmd = "mkdocs build -f config/mkdocs.yaml"
# inputs = ["docs", "config/mkdocs.yaml"]
# outputs = ["site"]

# [tool.pixi.feature.docs.tasks.doc-serve]
# cmd = "mkdocs serve -f config/mkdocs.yaml"
# inputs = ["docs", "config/mkdocs.yaml"]

# [tool.pixi.feature.docs.tasks.doc-deploy]
# cmd = "mkdocs gh-deploy -f config/mkdocs.yaml --force"
# inputs = ["docs", "config/mkdocs.yaml"]

#################################### RELEASE & BUILD ###############################################
[tool.pixi.feature.release.dependencies]
python-semantic-release = ">=8.5.1"

[tool.pixi.feature.release.tasks]
# Semver task will only work on the main or dev/develop branch (see releaserc.toml:branches)
semver = 'echo "Next Version is: $(semantic-release -c config/releaserc.toml version --print)"'
release = "semantic-release -c config/releaserc.toml version"

[tool.pixi.feature.build.dependencies]
hatch = "*"

[tool.pixi.feature.build.tasks]
# Builds the package
build = { cmd = [
  "hatch",
  "build",
  "--clean",
], inputs = [
  "src",
  "config/hatch.toml",
  "pyproject.toml",
], outputs = [
  "dist/*",
], env = { HATCH_CONFIG = "config/hatch.toml" } }

# Publishes the package to the main PYPI repository, depends on the build task
publish-pypi = { cmd = [
  "hatch",
  "publish",
  "--yes",
  "--repo",
  "main",
], inputs = [
  "dist/*",
], depends-on = [
  "build",
], env = { HATCH_CONFIG = "config/hatch.toml" } }

# Publishes the package to the TEST-PYPI repository, depends on the build task
publish-test = { cmd = [
  "hatch",
  "publish",
  "--yes",
  "--repo",
  "test",
], inputs = [
  "dist/*",
], depends-on = [
  "build",
], env = { HATCH_CONFIG = "config/hatch.toml" } }
